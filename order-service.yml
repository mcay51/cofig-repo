server:
  port: 8082

spring:
  application:
    name: order-service
  datasource:
    initialization-mode: always
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: true # Konsolda SQL sorgularını görmek için
    hibernate:
        ddl-auto: update # create, create-drop, validate, none veya update olabilir
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format-sql: true
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type: TRACE
management:
  endpoints:
    web:
      exposure:
        include: "*"
  trace:
    http: 
      enabled : true
  dump:
    http:
      enabled: true
resilience4j:
  circuitbreaker:
    instances:
      myServiceCircuitBreaker:
        slidingWindowSize: 4  # Devre kesici açılmadan önce değerlendirilecek çağrı sayısı
        slidingWindowType: COUNT_BASED  # Çağrılar sayıya dayalı olarak değerlendirilir
        minimumNumberOfCalls: 2  # Değerlendirme için gereken minimum çağrı sayısı
        failureRateThreshold: 50  # Devre kesici açılması için gereken başarısızlık oranı (%)
        slowCallDurationThreshold: 2s  # Yavaş olarak kabul edilen çağrılar için eşik süresi
        slowCallRateThreshold: 50  # Yavaş çağrıların devre kesiciyi tetiklemesi için gereken oran (%)
        waitDurationInOpenState: 5s  # Devre kesici açıkken bekleme süresi
        permittedNumberOfCallsInHalfOpenState: 3  # Yarı açık durumda izin verilen çağrı sayısı
        waitDurationInHalfOpenState: 5s  # Yarı açık durumda başarısız çağrılardan sonra bekleme süresi
        automaticTransitionFromOpenToHalfOpenEnabled: true  # Otomatik olarak yarı açık duruma geçiş
        # ignoreExceptions:
          # - com.example.exceptions.IgnoreThisException  # Bu istisnalar görmezden gelinir
        # recordExceptions:
          # - java.io.IOException  # Bu istisnalar başarısızlık olarak kaydedilir
          # - java.sql.SQLException
        writableStackTraceEnabled: true  # Stack trace'in yazılıp yazılmayacağını kontrol eder
  ratelimiter:
    instances:
      getProductDetailsRateLimiter:
        limitForPeriod: 5            # 10 saniyede en fazla 5 istek işlenir
        limitRefreshPeriod: 10s      # İstek limiti her 10 saniyede bir sıfırlanır
        timeoutDuration: 0           # İstek hemen reddedilir, beklenmez
        drainPermissionsOnError: true # Hata alındığında kalan tüm izinler tüketilir
        writableStackTraceEnabled: false # Stack trace yazımı devre dışı bırakılır
        eventConsumerBufferSize: 50   # En fazla 50 Rate Limiter olayı saklanır
  retry:
    instances:
      getProductDetailsRetry:
        maxAttempts: 5              # Maksimum 5 kez deneme yapılır
        waitDuration: 500ms          # Her yeniden deneme arasında 500ms beklenir
        # retryExceptions:             # Bu tür istisnalar meydana geldiğinde yeniden denenecek
          # - java.net.ConnectException  
          # - java.io.IOException
        # ignoreExceptions:            # Bu istisnalar olduğunda yeniden deneme yapılmaz
          # - java.lang.IllegalArgumentException
        exponentialBackoffMultiplier: 2 # Her yeniden denemede bekleme süresi iki katına çıkar
        maxDuration: 10s             # Yeniden denemeler en fazla 10 saniye içinde yapılır
  bulkhead:
    instances:
      orderServiceBulkhead:
        maxConcurrentCalls: 5       # Aynı anda işleyebileceği maksimum işlem sayısı
        maxWaitDuration: 2s         # İşlemin kuyruğa alınması durumunda maksimum bekleme süresi
eureka:
  client:
    service-url:
     defaultZone: http://eureka-server:8761/eureka/